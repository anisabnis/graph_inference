import os
import sys
import itertools
import random

network = sys.argv[1]
i = int(sys.argv[2])

print("Network : ", network)

sources = set()
paths = dict()

def findsubsets(S,m):
    return set(itertools.combinations(S, m))

def findAllPermutations(S, m):
    return set(itertools.combinations(S, m))

if i != 0:
    f = open("results_psm" +"/" + network + "/" + str(i) + "/orig_path.txt", "r")
else : 
    f = open("results_psm" +"/" + network +  "/orig_path.txt", "r")

for l in f:
    l = l.strip().split(" ")
    s=l[0]
    sources.add(s)
    d=l[-1]
    paths[((s,d))] = l
f.close()

if i != 0:
    f = open("results_psm" +"/" + network + "/" + str(i) + "/correlations.txt", "w")
else :
    f = open("results_psm" +"/" + network + "/correlations.txt", "w")

#for i in [1,2,3,4,5]:
for s in sources:
    req_dsts = [d for d in sources if d != s]
    req_dsts_subsets = findAllPermutations(req_dsts, 3)


    for sub in req_dsts_subsets:
        ucv1 = sub[0]
        cv = sub[1]
        ucv2 = sub[2]

        p1 = paths[((s, ucv1))]
        p2 = paths[((s, cv))]
        p3 = paths[((s, ucv2))]
        
        l1 = len(list(set(p1).intersection(p2)))
        l2 = len(list(set(p2).intersection(p3)))        
        # generate random 
        
        if random.randint(1,10) < i:
            make_err = True
        else :
            make_err = False

        if l1 > l2:
            if make_err == False:
                f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " g\n")
            else:
                f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " l\n")

        elif l2 > l1:
            if make_err == False:
                f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " l\n")
            else :
                f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " g\n")
        else:
            decide = random.randint(1,2)
            if decide == 1:
                #f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " e\n")
                pass
            else:
                #f.write(s + " " + ucv1 + " " + cv + " " + ucv2 + " e\n")
                pass
                
            


         
        
